""" 
O m√©todo construtor sempre √© executado quando uma nova inst√¢ncia da classe √© criada. 
Nesse m√©todo inicializamos o estado do nosso objeto. 
Para declarar o m√©todo construtor da classe, criamos um m√©todo com o nome __init__.

"""

#exemplo de uso de construtor ou inicializador

class Carro:
    def __init__(self, modelo, ano):  # Construtor
        
        self.modelo = modelo  # Atributo salvo na mem√≥ria
        self.ano = ano  # Atributo salvo na mem√≥ria
        

meu_carro = Carro("Fusca", 1975)  # O construtor √© chamado automaticamente
print(meu_carro.modelo)  # Sa√≠da: Fusca
        
# üîé Internamente, o Python faz isso:

# Chama __new__() ‚Üí Aloca espa√ßo na Heap
# Chama __init__() ‚Üí Define self.modelo = "Fusca" e self.ano = 1975
# Retorna o objeto criado e associa √† vari√°vel meu_carro
    
""" 
O m√©todo __del__ √© um destrutor, chamado quando um objeto √© removido da mem√≥ria. 
Ele libera recursos antes do objeto ser destru√≠do pelo Garbage Collector (GC).  

"""       
# Exemplo de destrutor

class Exemplo:
    def __init__(self):
        print("Objeto criado!")

    def __del__(self):
        print("Objeto destru√≠do!")

obj = Exemplo()
del obj  # Chama __del__()

# üîé Internamente, o Python faz isso:

# Aloca o objeto na Heap
# Associa a vari√°vel obj ao objeto
# Quando del obj √© chamado, reduz a contagem de refer√™ncias do objeto
# Se n√£o houver mais refer√™ncias, o Garbage Collector remove o objeto da mem√≥ria e chama __del__()

# OBS: o Garbage Collector √© remove o objeto da mem√≥ria com ou seu o uso do "del obj", ou seja, o m√©todo
# del sempre √© chamado